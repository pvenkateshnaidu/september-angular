{"version":3,"sources":["webpack:///./src/app/auth/forgot-password/forgot-password.component.html","webpack:///./src/app/auth/login/login.component.html","webpack:///./src/app/auth/register/register.component.html","webpack:///./src/app/auth/common-auth-routing.module.ts","webpack:///./src/app/auth/common-auth.module.ts","webpack:///./src/app/auth/forgot-password/forgot-password.component.scss","webpack:///./src/app/auth/forgot-password/forgot-password.component.ts","webpack:///./src/app/auth/login/login.component.scss","webpack:///./src/app/auth/login/login.component.ts","webpack:///./src/app/auth/register/register.component.scss","webpack:///./src/app/auth/register/register.component.ts","webpack:///./src/app/layouts/welcome-layout/welcome-layout-routing.routing.ts","webpack:///./src/app/layouts/welcome-layout/welcome-layout.module.ts"],"names":[],"mappings":"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","file":"layouts-welcome-layout-welcome-layout-module-es5.js","sourcesContent":["module.exports = \"<p>forgot-password works!</p>\\r\\n\"","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-4 offset-md-4\\\">\\r\\n            <div class=\\\"card\\\">\\r\\n              <div class=\\\"card-header\\\">\\r\\n                <h5 class=\\\"card-title text-center\\\">Portal Login</h5>\\r\\n\\r\\n                <small id=\\\"emailHelp\\\" class=\\\"form-text text-muted\\\" *ngIf=\\\"serverErrors\\\">{{ serverErrors.error }}</small>\\r\\n                <hr>\\r\\n              </div>\\r\\n              <div class=\\\"card-body\\\">\\r\\n                <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"login()\\\">\\r\\n\\r\\n                  <div class=\\\"row\\\">\\r\\n                    <div class=\\\"col-md-12\\\">\\r\\n                      <div class=\\\"form-group\\\">\\r\\n                        <label>User Name</label>\\r\\n                        <input type=\\\"text\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\" placeholder=\\\"Email\\\">\\r\\n                      </div>\\r\\n\\r\\n                      <div *ngIf=\\\"email.invalid && (email.dirty || email.touched)\\\"\\r\\n                              class=\\\"form-text text-muted\\\">\\r\\n                            <div *ngIf=\\\"email.errors?.required\\\">\\r\\n                              Email is required.\\r\\n                            </div>\\r\\n                            <div *ngIf=\\\"email.errors?.email\\\">\\r\\n                              Invalid email address.\\r\\n                            </div>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n                  <div class=\\\"row\\\">\\r\\n                    <div class=\\\"col-md-12\\\">\\r\\n                      <div class=\\\"form-group\\\">\\r\\n                        <label for=\\\"exampleInputEmail1\\\">Password</label>\\r\\n                        <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" placeholder=\\\"Password\\\">\\r\\n                      </div>\\r\\n\\r\\n                      <div *ngIf=\\\"password.invalid && (password.dirty || password.touched)\\\"\\r\\n                              class=\\\"form-text text-muted\\\">\\r\\n                            <div *ngIf=\\\"password.errors?.required\\\">\\r\\n                              password is required.\\r\\n                            </div>\\r\\n                            <div *ngIf=\\\"password.errors?.minlength\\\">\\r\\n                              Password must be 5 charcter long\\r\\n                            </div>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n                  <div class=\\\"row\\\">\\r\\n                    <div class=\\\"update ml-auto mr-auto\\\">\\r\\n                      <button type=\\\"submit\\\" [disabled] = \\\"!loginForm.valid\\\" class=\\\"btn btn-primary btn-round\\\">Login</button>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </form>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n</div>\\r\\n\"","module.exports = \"\\r\\n<div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-4 offset-md-4\\\">\\r\\n                <div class=\\\"card\\\">\\r\\n                  <div class=\\\"card-header\\\">\\r\\n                    <h5 class=\\\"card-title text-center\\\">Register</h5>\\r\\n                    <hr>\\r\\n                  </div>\\r\\n                  <div class=\\\"card-body\\\">\\r\\n                    <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"registerUser()\\\">\\r\\n                    <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-md-12\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                            <label>First Name</label>\\r\\n                            <input type=\\\"text\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\" placeholder=\\\"First Name\\\" required>\\r\\n                            <div *ngIf=\\\"name.invalid && (name.dirty || name.touched)\\\"\\r\\n                                    class=\\\"form-text text-muted\\\">\\r\\n                                  <div *ngIf=\\\"name.errors?.required\\\">\\r\\n                                    Name is required.\\r\\n                                  </div>\\r\\n                                  <div *ngIf=\\\"name.errors?.minlength\\\">\\r\\n                                    Name must be at least 5 characters long.\\r\\n                                  </div>\\r\\n                            </div> \\r\\n                            <small id=\\\"emailHelp\\\" class=\\\"form-text text-muted\\\" *ngIf=\\\"serverErrors\\\">{{ serverErrors.name }}</small>\\r\\n\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                            \\r\\n                      <div class=\\\"row\\\">\\r\\n                        <!-- <div class=\\\"col-md-6 pr-1\\\">\\r\\n                          <div class=\\\"form-group\\\">\\r\\n                            <label>User Name</label>\\r\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Username\\\">\\r\\n                          </div>\\r\\n                        </div> -->\\r\\n                        <div class=\\\"col-md-12\\\">\\r\\n                          <div class=\\\"form-group\\\">\\r\\n                            <label for=\\\"exampleInputEmail1\\\">Email address</label>\\r\\n                            <input type=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\" placeholder=\\\"Email\\\" required>\\r\\n                            \\r\\n                            <div *ngIf=\\\"email.invalid && (email.dirty || email.touched)\\\"\\r\\n                                    class=\\\"form-text text-muted\\\">\\r\\n                                  <div *ngIf=\\\"email.errors?.required\\\">\\r\\n                                    Email is required.\\r\\n                                  </div>\\r\\n                                  <div *ngIf=\\\"email.errors?.email\\\">\\r\\n                                    Invalid email address.\\r\\n                                  </div>\\r\\n                            </div> \\r\\n\\r\\n                            <small id=\\\"emailHelp\\\" class=\\\"form-text text-muted\\\" *ngIf=\\\"serverErrors\\\">{{ serverErrors.email }}</small>\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                      \\r\\n                      <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-md-12\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                            <label>Password</label>\\r\\n                            <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" placeholder=\\\"Password\\\" required>\\r\\n                            \\r\\n                            <div *ngIf=\\\"password.invalid && (password.dirty || password.touched)\\\"\\r\\n                                    class=\\\"form-text text-muted\\\">\\r\\n                                  <div *ngIf=\\\"password.errors?.required\\\">\\r\\n                                    Password is required.\\r\\n                                  </div>\\r\\n                                  <div *ngIf=\\\"password.errors?.minlength\\\">\\r\\n                                    Password must be at least 5 characters long.\\r\\n                                  </div>\\r\\n                            </div>\\r\\n\\r\\n                            <small id=\\\"emailHelp\\\" class=\\\"form-text text-muted\\\" *ngIf=\\\"serverErrors\\\">{{ serverErrors.password }}</small>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                      <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-md-12\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                            <label>Confirm Password</label>\\r\\n                            <input type=\\\"password\\\" formControlName=\\\"confirm_password\\\" class=\\\"form-control\\\" placeholder=\\\"Confirm Password\\\" required>\\r\\n                            \\r\\n                            <div *ngIf=\\\"confirm_password.invalid && (confirm_password.dirty || confirm_password.touched)\\\"\\r\\n                                    class=\\\"form-text text-muted\\\">\\r\\n                                  <div *ngIf=\\\"confirm_password.errors?.required\\\">\\r\\n                                    Confirm Password is required.\\r\\n                                  </div>\\r\\n                                  <div *ngIf=\\\"confirm_password.errors?.minlength\\\">\\r\\n                                    Confirm Password must be at least 5 characters long.\\r\\n                                  </div>\\r\\n                            </div>\\r\\n\\r\\n                            <small id=\\\"emailHelp\\\" class=\\\"form-text text-muted\\\" *ngIf=\\\"serverErrors\\\">{{ serverErrors.confirm_password }}</small>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                      <div class=\\\"row\\\">\\r\\n                        <div class=\\\"update ml-auto mr-auto\\\">\\r\\n                          <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-round\\\" [disabled]=\\\"!registerForm.valid\\\">Register</button>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </form>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n</div>\"","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { AuthInterceptor } from './auth-interceptor.interceptor';\r\n\r\nconst routes: Routes = [\r\n  {path: 'login', component: LoginComponent},\r\n      {path: 'register', component: RegisterComponent},\r\n      {path: 'forgot-password', component: ForgotPasswordComponent}\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  exports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    RouterModule,\r\n  ]\r\n})\r\nexport class CommonAuthRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { CommonAuthRoutingModule } from './common-auth-routing.module';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { CommonAuthService } from './common-auth.service';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { AuthInterceptor } from './auth-interceptor.interceptor';\r\n\r\n@NgModule({\r\n  declarations: [LoginComponent, RegisterComponent, ForgotPasswordComponent],\r\n  imports: [\r\n    CommonModule,\r\n    CommonAuthRoutingModule,\r\n  ],\r\n  providers: [\r\n    CommonAuthService,\r\n    {provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true}\r\n  ]\r\n})\r\nexport class CommonAuthModule { }\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvZm9yZ290LXBhc3N3b3JkL2ZvcmdvdC1wYXNzd29yZC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-forgot-password',\r\n  templateUrl: './forgot-password.component.html',\r\n  styleUrls: ['./forgot-password.component.scss']\r\n})\r\nexport class ForgotPasswordComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \".text-muted {\\n  text-align: center;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXV0aC9sb2dpbi9DOlxceGFtcHBcXGh0ZG9jc1xcc2VwLWJhclxcYW5nL3NyY1xcYXBwXFxhdXRoXFxsb2dpblxcbG9naW4uY29tcG9uZW50LnNjc3MiLCJzcmMvYXBwL2F1dGgvbG9naW4vbG9naW4uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxrQkFBQTtBQ0NKIiwiZmlsZSI6InNyYy9hcHAvYXV0aC9sb2dpbi9sb2dpbi5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi50ZXh0LW11dGVke1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59IiwiLnRleHQtbXV0ZWQge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59Il19 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { CommonAuthService } from '../common-auth.service';\r\nimport { NgForm, FormsModule, FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { RouterModule, Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  serverErrors = [];\r\n\r\n  constructor(private auth: CommonAuthService, private router: Router) { }\r\n\r\n  ngOnInit() {\r\n    this.loginForm = new FormGroup({\r\n      'email' : new FormControl(null, [Validators.required, Validators.email]),\r\n      'password' : new FormControl(null, [Validators.required, Validators.minLength(5)])\r\n    });\r\n  }\r\n\r\n  get email(){ return this.loginForm.get('email'); }\r\n  get password(){ return this.loginForm.get('password'); }\r\n\r\n  login(){\r\n    console.log(this.loginForm);\r\n    this.auth.logIn(this.loginForm).subscribe(\r\n      (response) => {\r\n        console.log(response.token);\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('role');\r\n        localStorage.setItem('token', response.token);\r\n        localStorage.setItem('role', response.role);\r\n        this.router.navigate(['/dashboard']);\r\n      },\r\n      (error) => {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('role');\r\n        this.serverErrors = error.error;\r\n        console.log(this.serverErrors);\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvcmVnaXN0ZXIvcmVnaXN0ZXIuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\r\nimport { NgForm, FormsModule, FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { CommonAuthService } from '../common-auth.service';\r\nimport { error } from '@angular/compiler/src/util';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  registerForm: FormGroup\r\n  serverErrors = [];\r\n  constructor(private auth: CommonAuthService, private route: Router) { }\r\n\r\n  ngOnInit() {\r\n    this.registerForm = new FormGroup({\r\n      'name': new FormControl(null, [Validators.required, Validators.minLength(5)]),\r\n      'email': new FormControl(null, [Validators.required, Validators.email]),\r\n      'password': new FormControl(null, [Validators.required, Validators.minLength(5)]),\r\n      'confirm_password': new FormControl(null, [Validators.required, Validators.minLength(5)])\r\n    })\r\n  }\r\n\r\n  get name() { return this.registerForm.get('name'); }\r\n  get email() { return this.registerForm.get('email'); }\r\n  get password() { return this.registerForm.get('password'); }\r\n  get confirm_password() { return this.registerForm.get('confirm_password'); }\r\n\r\n  registerUser(){\r\n    this.auth.registerUser(this.registerForm).subscribe(success => {\r\n      //console.log(success);\r\n      this.route.navigate(['home/login']);\r\n\r\n    },error => { \r\n        //console.log(error);\r\n        this.serverErrors = error.error.errors;\r\n        console.log(this.serverErrors);\r\n        ;\r\n    });\r\n  }\r\n\r\n}\r\n","import { Routes } from '@angular/router';\r\nimport { CommonAuthModule } from 'app/auth/common-auth.module';\r\n\r\nexport const WelcomeLayoutRouting: Routes = [\r\n  {\r\n    path: '',\r\n    loadChildren: () => import('../../auth/common-auth.module').then(m => m.CommonAuthModule)\r\n  }\r\n];\r\n\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { WelcomeLayoutRouting } from './welcome-layout-routing.routing';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { CommonAuthModule } from 'app/auth/common-auth.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n  ],\r\n  imports: [\r\n    CommonAuthModule,\r\n    RouterModule.forChild(WelcomeLayoutRouting)\r\n  ]\r\n})\r\nexport class WelcomeLayoutModule { }\r\n"],"sourceRoot":""}